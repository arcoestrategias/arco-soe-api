generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// -----------------------------------------------------------------------------
/// üìò CONVENCIONES Y NOMENCLATURA ‚Äî SOE BACKEND
/// -----------------------------------------------------------------------------

/// üî† Nombres de modelos:
/// - En ingl√©s, en PascalCase (Company, UserPermission)

/// üîÅ Relaciones y campos inversos:
/// Prisma requiere que todas las relaciones sean bidireccionales.
///
/// - Uno a muchos directo:
///   - Ejemplo: `Company` ‚Üí `BusinessUnit[]`
///   - El campo inverso en el lado "muchos" debe tener `@relation(...)`
///   - El nombre pluralizado debe reflejar el tipo exacto: `businessUnits`, `users`
///
/// - Muchos a muchos con tabla intermedia personalizada:
///   - Ejemplo: `UserPermission`, `RolePermission`, `UserBusinessUnit`
///   - En estos casos, el campo inverso suele llamarse `userPermissions`, `roleLinks`, etc.
///   - Se prefiere usar nombres descriptivos del join (no necesariamente `users`, `roles`) para evitar confusi√≥n
///
/// - Si un campo apunta a una entidad principal directamente ‚Üí usar plural natural (`users`, `permissions`)
/// - Si un campo apunta a una tabla intermedia o relaci√≥n espec√≠fica ‚Üí usar nombres sem√°nticos (`userLinks`, `rolePermissions`, `userBusinessUnits`)

/// üîê Control de acceso:
/// - Los permisos se otorgan por `UserPermission`, con `userId + businessUnitId + permissionId`
/// - Los `Role` funcionan como plantillas y no se usan en tiempo de ejecuci√≥n
/// - La tabla `UserBusinessUnit` define el contexto de acci√≥n del usuario en el sistema

/// üß± Dise√±o multiempresa:
/// - Cada `Company` puede tener varias `BusinessUnit`
/// - Los usuarios se asocian a una o varias unidades de negocio mediante `UserBusinessUnit`
/// - Los cargos (`Position`) son estructurales, no de control de acceso

/// üßº Estilo:
/// - Campos: camelCase
/// - Tablas: PascalCase
/// - Auditar con campos createdAt, updatedAt, createdBy, updatedBy si aplica

model Company {
  id                      String  @id @default(uuid()) @db.Uuid
  name                    String  @db.VarChar(500)
  description             String? @db.VarChar(1000)
  ide                     String  @db.VarChar(13)
  legalRepresentativeName String? @db.VarChar(250)
  address                 String? @db.VarChar(250)
  phone                   String? @db.VarChar(50)
  order                   Int?
  isPrivate               Boolean @default(false)
  isGroup                 Boolean @default(false)

  businessUnits BusinessUnit[]
  userCompanies UserCompany[]

  // Auditor√≠a
  isActive  Boolean  @default(true)
  createdBy String?
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusinessUnit {
  id                      String             @id @default(uuid()) @db.Uuid
  name                    String             @db.VarChar(500)
  description             String?            @db.VarChar(1000)
  ide                     String?            @db.VarChar(13)
  legalRepresentativeName String?            @db.VarChar(250)
  address                 String?            @db.VarChar(250)
  phone                   String?            @db.VarChar(50)
  order                   Int?
  isMain                  Boolean            @default(false)
  companyId               String             @db.Uuid
  company                 Company            @relation(fields: [companyId], references: [id])
  positions               Position[]
  userLinks               UserBusinessUnit[]
  userPermissions         UserPermission[]

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  strategicPlans StrategicPlan[]
}

model Position {
  id   String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(500)

  businessUnitId String       @db.Uuid
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])

  userLinks UserBusinessUnit[]

  // userId String? @db.Uuid
  // user   User?   @relation(fields: [userId], references: [id])

  strategicPlanId String?        @db.Uuid
  strategicPlan   StrategicPlan? @relation(fields: [strategicPlanId], references: [id])

  mission    String?
  vision     String?
  department String?
  isCeo      Boolean @default(false)

  positionSuperiorId String?    @db.Uuid
  superior           Position?  @relation("PositionHierarchy", fields: [positionSuperiorId], references: [id])
  subordinates       Position[] @relation("PositionHierarchy")

  projectParticipants ProjectParticipant[]
  priorities          Priority[]
  levers Lever[]

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  objectives        Objective[]
  strategicProjects StrategicProject[]

  @@index([businessUnitId])
}

model Role {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique
  description String?
  permissions RolePermission[]

  userLinks UserBusinessUnit[]

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @unique
  shortCode   String       @unique
  description String?
  permissions Permission[]

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique
  description String?
  moduleId    String           @db.Uuid
  module      Module           @relation(fields: [moduleId], references: [id])
  roleLinks   RolePermission[]
  userLinks   UserPermission[]

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RolePermission {
  id           String     @id @default(uuid()) @db.Uuid
  roleId       String     @db.Uuid
  permissionId String     @db.Uuid
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                String             @id @default(uuid()) @db.Uuid
  email             String             @unique
  username          String?            @unique
  ide               String             @unique
  telephone         String?
  firstName         String
  lastName          String
  password          String
  userCompanies     UserCompany[]
  userBusinessUnits UserBusinessUnit[]
  userPermissions   UserPermission[]
  isPlatformAdmin   Boolean            @default(false)

  tokenInvalidBeforeAt  DateTime?
  resetToken            String?   @db.VarChar(255)
  resetTokenExpiresAt   DateTime?
  isEmailConfirmed      Boolean   @default(false)
  emailConfirmToken     String?   @db.VarChar(255)
  emailConfirmExpiresAt DateTime?

  lastLoginAt   DateTime?
  loginAttempts Int       @default(0)
  lockedUntil   DateTime?

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCompany {
  id        String  @id @default(uuid()) @db.Uuid
  userId    String  @db.Uuid
  companyId String  @db.Uuid
  isManager Boolean @default(false)

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@unique([userId, companyId])
}

// model UserBusinessUnit {
//   id             String  @id @default(uuid()) @db.Uuid
//   userId         String  @db.Uuid
//   businessUnitId String  @db.Uuid
//   isResponsible  Boolean @default(false)
//   positionId     String? @db.Uuid
//   roleId         String? @db.Uuid

//   user         User         @relation(fields: [userId], references: [id])
//   businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])
//   position     Position?    @relation(fields: [positionId], references: [id])
//   role         Role?        @relation(fields: [roleId], references: [id])

//   createdBy String?  @db.Uuid
//   updatedBy String?  @db.Uuid
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([userId, businessUnitId])
// }

model UserBusinessUnit {
  userId         String    @db.Uuid
  businessUnitId String    @db.Uuid
  positionId     String?   @db.Uuid
  roleId         String?   @db.Uuid
  isResponsible  Boolean   @default(false)

  user           User      @relation(fields: [userId], references: [id])
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
  position       Position? @relation(fields: [positionId], references: [id])
  role           Role?     @relation(fields: [roleId], references: [id])

  @@id([userId, businessUnitId]) // un registro por usuario y BU
  @@unique([positionId])         // una posici√≥n no puede tener 2 usuarios (permite null duplicado)
  @@index([businessUnitId])
  @@index([userId])
}

model UserPermission {
  id             String  @id @default(uuid()) @db.Uuid
  userId         String  @db.Uuid
  businessUnitId String  @db.Uuid
  permissionId   String  @db.Uuid
  isAllowed      Boolean @default(true)

  user         User         @relation(fields: [userId], references: [id])
  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id])
  permission   Permission   @relation(fields: [permissionId], references: [id])

  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, businessUnitId, permissionId])
  @@index([userId, businessUnitId])
}

model StrategicPlan {
  id                   String    @id @default(uuid()) @db.Uuid
  name                 String    @db.VarChar(500)
  description          String?   @db.VarChar(1000)
  order                Int       @default(0)
  period               Int?
  fromAt               DateTime?
  untilAt              DateTime?
  mission              String?   @db.VarChar(5000)
  vision               String?   @db.VarChar(5000)
  competitiveAdvantage String?   @db.VarChar(5000)
  status               String    @default("OPE") @db.VarChar(3)

  businessUnitId String       @db.Uuid
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])

  values     StrategicValue[]
  factors    StrategicSuccessFactor[]
  objectives Objective[]
  projects   StrategicProject[]

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  positions Position[]
}

model StrategicValue {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @db.VarChar(500)
  description String? @db.VarChar(1000)
  order       Int     @default(0)

  strategicPlanId String        @db.Uuid
  strategicPlan   StrategicPlan @relation(fields: [strategicPlanId], references: [id])

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StrategicSuccessFactor {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @db.VarChar(500)
  description String? @db.VarChar(1000)
  order       Int     @default(0)

  strategicPlanId String        @db.Uuid
  strategicPlan   StrategicPlan @relation(fields: [strategicPlanId], references: [id])

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Objective {
  id               String  @id @default(uuid()) @db.Uuid
  name             String  @db.VarChar(500)
  description      String? @db.VarChar(1000)
  order            Int     @default(0)
  perspective      String  @default("FIN") @db.VarChar(3)
  level            String  @default("EST") @db.VarChar(3)
  valueOrientation String  @default("CRE") @db.VarChar(3)
  goalValue        Float?  @default(0)
  status           String  @default("OPE")

  positionId String   @db.Uuid
  position   Position @relation(fields: [positionId], references: [id])

  strategicPlanId String        @db.Uuid
  strategicPlan   StrategicPlan @relation(fields: [strategicPlanId], references: [id])

  indicatorId String?    @db.Uuid
  indicator   Indicator? @relation(fields: [indicatorId], references: [id])

  objectiveParentId String?     @db.Uuid
  parent            Objective?  @relation("ObjectiveHierarchy", fields: [objectiveParentId], references: [id])
  children          Objective[] @relation("ObjectiveHierarchy")

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  objectiveGoals    ObjectiveGoal[]
  objectiveGoalsHis ObjectiveGoalHist[]
  strategicProjects StrategicProject[]
  priorities        Priority[]
}

model Indicator {
  id           String    @id @default(uuid()) @db.Uuid
  name         String    @db.VarChar(500)
  description  String?   @db.VarChar(1000)
  order        Int       @default(0)
  formula      String?   @db.VarChar(1000) @default("N/A")
  isDefault    Boolean   @default(false)
  isConfigured Boolean   @default(false)
  origin       String?   @default("MAN")
  tendence     String?   @default("POS")
  frequency    String?   @default("MES")
  measurement  String?   @default("POR")
  type         String?   @default("GES")
  reference    String?   @default("MAN")
  periodStart  DateTime?
  periodEnd    DateTime?

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  objectives Objective[]
}

model ObjectiveGoal {
  id String @id @default(uuid()) @db.Uuid

  month Int
  year  Int

  goalPercentage    Float? @default(100)
  goalValue         Float? @default(0)
  realPercentage    Float? @default(0)
  realValue         Float?
  indexCompliance   Float? @default(0)
  score             Float? @default(100)
  rangeExceptional  Float? @default(0)
  rangeInacceptable Float? @default(0)
  indexPerformance  Float? @default(0)
  baseValue         Float? @default(0)
  light             Float? @default(0)

  observation String? @db.Text
  action      String? @db.Text

  objectiveId String    @db.Uuid
  objective   Objective @relation(fields: [objectiveId], references: [id])

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([objectiveId, month, year])
}

model ObjectiveGoalHist {
  id          String @id @default(uuid()) @db.Uuid
  objectiveId String @db.Uuid
  month       Int
  year        Int

  goalPercentage    Float?
  goalValue         Float?
  realPercentage    Float?
  realValue         Float?
  indexCompliance   Float?
  score             Float?
  rangeExceptional  Float?
  rangeInacceptable Float?
  indexPerformance  Float?
  baseValue         Float?
  light             Float?

  observation String? @db.Text
  action      String? @db.Text

  wasActive  Boolean
  archivedAt DateTime @default(now())
  archivedBy String?  @db.Uuid

  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  objective Objective @relation(fields: [objectiveId], references: [id])

  @@index([objectiveId, year, month])
}

model StrategicProject {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @db.VarChar(500)
  description String?   @db.VarChar(1000)
  order       Int       @default(0)
  fromAt      DateTime?
  untilAt     DateTime?
  finishedAt  DateTime?
  canceledAt  DateTime?
  status      String    @default("OPE")
  budget      Float?

  strategicPlanId String        @db.Uuid
  strategicPlan   StrategicPlan @relation(fields: [strategicPlanId], references: [id])

  positionId String   @db.Uuid
  position   Position @relation(fields: [positionId], references: [id])

  objectiveId String?    @db.Uuid
  objective   Objective? @relation(fields: [objectiveId], references: [id])

  factors      ProjectFactor[]
  participants ProjectParticipant[]

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectFactor {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @db.VarChar(500)
  description String? @db.VarChar(1000)
  result      String? @db.VarChar(1000)
  projectId   String  @db.Uuid
  order       Int     @default(0)

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project StrategicProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   ProjectTask[]

  @@index([projectId])
}

model ProjectParticipant {
  id         String  @id @default(uuid()) @db.Uuid
  isLeader   Boolean @default(false)
  projectId  String  @db.Uuid
  positionId String  @db.Uuid

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project  StrategicProject @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  position Position         @relation(fields: [positionId], references: [id])

  tasks ProjectTask[]

  @@unique([projectId, positionId])
  @@index([projectId])
  @@index([positionId])
}

model ProjectTask {
  id                   String    @id @default(uuid()) @db.Uuid
  name                 String    @db.VarChar(500)
  description          String?   @db.VarChar(1000)
  order                Int       @default(0)
  fromAt               DateTime  @db.Date
  untilAt              DateTime  @db.Date
  finishedAt           DateTime? @db.Date
  status               String    @default("OPE") @db.VarChar(3)
  props                String?   @db.VarChar(1000)
  result               String?   @db.VarChar(1000)
  methodology          String?   @db.VarChar(1000)
  budget               Decimal   @default(0)
  limitation           String?   @db.VarChar(1000)
  comments             String?   @db.VarChar(1000)
  projectFactorId      String    @db.Uuid
  projectParticipantId String    @db.Uuid

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  factor      ProjectFactor      @relation(fields: [projectFactorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  participant ProjectParticipant @relation(fields: [projectParticipantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([projectFactorId])
  @@index([projectParticipantId])
}

model Lever {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @db.VarChar(500)
  description String? @db.VarChar(1000)
  order       Int     @default(0)

  positionId String   @db.Uuid
  position   Position @relation(fields: [positionId], references: [id])

  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Priority {
  id       String  @id @default(uuid()) @db.Uuid
  name        String  @db.VarChar(500)
  description String? @db.VarChar(1000)
  order       Int     @default(0)

  fromAt     DateTime  @db.Date
  untilAt    DateTime  @db.Date
  finishedAt DateTime? @db.Date
  canceledAt DateTime? @db.Date

  month Int?
  year  Int?

  status String @default("OPE") @db.VarChar(3) // OPE | CLO | CAN

  positionId String @db.Uuid
  position   Position @relation(fields: [positionId], references: [id])

  objectiveId String? @db.Uuid
  objective   Objective? @relation(fields: [objectiveId], references: [id])

  isActive Boolean @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([positionId])
  @@index([objectiveId])
  @@index([status])
  @@index([year, month])
  @@index([untilAt])
}

model File {
  id               String   @id @default(uuid())
  fieldName        String?                         
  description      String?
  originalName     String?                           
  encoding         String?
  mimeType         String?                          
  destination      String?
  fileName         String?                          
  path             String?
  sizeByte         Decimal?                         
  extension        String?
  icon             String?
  moduleShortcode  String?   
  referenceId      String? @db.Uuid
  screenKey        String?          // ‚Üê p.ej. "logo", "avatar", "attachments", "banner"
  
  isActive  Boolean  @default(true)
  createdBy String?  @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([moduleShortcode, referenceId], name: "idx_files_module_ref")
  @@index([moduleShortcode, referenceId, screenKey], name: "idx_files_module_ref_screen") // ‚Üê nuevo

  @@map("files")
}

model NotificationTemplate {
  id            String   @id @default(uuid())
  name          String   @db.VarChar(500)
  subject       String?  @db.VarChar(1000)
  codeTemplate  String   @db.Char(3) @unique
  template      String   @db.Text

  isActive      Boolean  @default(true)
  createdBy     String?
  updatedBy     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([isActive])
}