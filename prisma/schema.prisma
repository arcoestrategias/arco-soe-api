generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id             String   @id @default(uuid())
  name           String   @db.VarChar(150)
  description    String?  @db.VarChar(500)
  ide            String   @db.VarChar(13)
  legalRepresentativeName String? @db.VarChar(250)
  address        String?  @db.VarChar(250)
  phone          String?  @db.VarChar(50)
  order          Int?
  isPrivate                Boolean       @default(false)
  isGroup                  Boolean       @default(false)

  businessUnits  BusinessUnit[]
  userCompanies UserCompany[]

  // Auditor√≠a
  isActive       Boolean        @default(true)
  createdBy      String?
  updatedBy      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}


model BusinessUnit {
  id                       String   @id @default(uuid())
  name                     String   @db.VarChar(150)
  description              String?  @db.VarChar(500)
  ide                      String?  @db.VarChar(13)
  legalRepresentativeName  String?  @db.VarChar(250)
  address                  String?  @db.VarChar(250)
  phone                    String?  @db.VarChar(50)
  order                    Int?
  companyId                String
  company                  Company  @relation(fields: [companyId], references: [id])
  positions                Position[]
  userLinks                UserBusinessUnit[]
  userPermissions          UserPermission[]

  // Auditor√≠a
  isActive       Boolean        @default(true)
  createdBy      String?
  updatedBy      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Position {
  id              String           @id @default(uuid())
  name            String
  businessUnitId  String
  businessUnit    BusinessUnit     @relation(fields: [businessUnitId], references: [id])
  userLinks       UserBusinessUnit[]

  // Auditor√≠a
  isActive       Boolean        @default(true)
  createdBy      String?
  updatedBy      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Role {
  id           String            @id @default(uuid())
  name         String            @unique
  description  String?
  permissions  RolePermission[]

  userLinks    UserBusinessUnit[]

  // Auditor√≠a
  isActive       Boolean        @default(true)
  createdBy      String?
  updatedBy      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Module {
  id          String        @id @default(uuid())
  name        String        @unique
  shortCode   String        @unique 
  description String?
  permissions Permission[]

  // Auditor√≠a
  isActive       Boolean        @default(true)
  createdBy      String?
  updatedBy      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Permission {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  moduleId    String
  module      Module        @relation(fields: [moduleId], references: [id])
  roleLinks   RolePermission[]
  userLinks   UserPermission[]

  // Auditor√≠a
  isActive       Boolean        @default(true)
  createdBy      String?
  updatedBy      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  // Auditor√≠a
  isActive       Boolean        @default(true)
  createdBy      String?
  updatedBy      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model User {
  id                      String    @id @default(uuid())
  email                   String    @unique
  username                String?   @unique
  ide                     String    @unique
  telephone               String?
  firstName               String
  lastName                String
  password                String
  userCompanies UserCompany[]
  userBusinessUnits UserBusinessUnit[]
  userPermissions   UserPermission[]
  isPlatformAdmin         Boolean @default(false)


  // Recuperaci√≥n y confirmaci√≥n de cuenta
  resetToken              String?   @db.VarChar(255)
  resetTokenExpiresAt     DateTime?
  isEmailConfirmed        Boolean   @default(false)
  emailConfirmToken       String?   @db.VarChar(255)
  emailConfirmExpiresAt   DateTime?

  // Seguridad del login
  lastLoginAt             DateTime?           //√öltima vez que inici√≥ sesi√≥n
  loginAttempts           Int       @default(0) //Intentos fallidos acumulados
  lockedUntil             DateTime?           //Si est√° temporalmente bloqueado

  // Auditor√≠a
  isActive       Boolean        @default(true)
  createdBy      String?
  updatedBy      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model UserCompany {
  id         String   @id @default(uuid())
  userId     String
  companyId  String
  isManager  Boolean  @default(false)

  user       User     @relation(fields: [userId], references: [id])
  company    Company  @relation(fields: [companyId], references: [id])

  @@unique([userId, companyId])
}

model UserBusinessUnit {
  id              String   @id @default(uuid())
  userId          String
  businessUnitId  String
  isResponsible   Boolean          @default(false)
  positionId      String?
  roleId          String?

  user            User          @relation(fields: [userId], references: [id])
  businessUnit    BusinessUnit  @relation(fields: [businessUnitId], references: [id])
  position        Position?     @relation(fields: [positionId], references: [id])
  role            Role?         @relation(fields: [roleId], references: [id])

  @@unique([userId, businessUnitId])

  // Auditor√≠a
  createdBy      String?
  updatedBy      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model UserPermission {
  id              String      @id @default(uuid())
  userId          String
  businessUnitId  String
  permissionId    String
  isAllowed       Boolean     @default(true)

  user            User         @relation(fields: [userId], references: [id])
  businessUnit    BusinessUnit @relation(fields: [businessUnitId], references: [id])
  permission      Permission   @relation(fields: [permissionId], references: [id])

  @@unique([userId, businessUnitId, permissionId])
  @@index([userId, businessUnitId])

  // Auditor√≠a
  createdBy      String?
  updatedBy      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}


/// -----------------------------------------------------------------------------
/// üìò CONVENCIONES Y NOMENCLATURA ‚Äî SOE BACKEND
/// -----------------------------------------------------------------------------

/// üî† Nombres de modelos:
/// - En ingl√©s, en PascalCase (Company, UserPermission)

/// üîÅ Relaciones y campos inversos:
/// Prisma requiere que todas las relaciones sean bidireccionales.
///
/// - Uno a muchos directo:
///   - Ejemplo: `Company` ‚Üí `BusinessUnit[]`
///   - El campo inverso en el lado "muchos" debe tener `@relation(...)`
///   - El nombre pluralizado debe reflejar el tipo exacto: `businessUnits`, `users`
///
/// - Muchos a muchos con tabla intermedia personalizada:
///   - Ejemplo: `UserPermission`, `RolePermission`, `UserBusinessUnit`
///   - En estos casos, el campo inverso suele llamarse `userPermissions`, `roleLinks`, etc.
///   - Se prefiere usar nombres descriptivos del join (no necesariamente `users`, `roles`) para evitar confusi√≥n
///
/// - Si un campo apunta a una entidad principal directamente ‚Üí usar plural natural (`users`, `permissions`)
/// - Si un campo apunta a una tabla intermedia o relaci√≥n espec√≠fica ‚Üí usar nombres sem√°nticos (`userLinks`, `rolePermissions`, `userBusinessUnits`)

/// üîê Control de acceso:
/// - Los permisos se otorgan por `UserPermission`, con `userId + businessUnitId + permissionId`
/// - Los `Role` funcionan como plantillas y no se usan en tiempo de ejecuci√≥n
/// - La tabla `UserBusinessUnit` define el contexto de acci√≥n del usuario en el sistema

/// üß± Dise√±o multiempresa:
/// - Cada `Company` puede tener varias `BusinessUnit`
/// - Los usuarios se asocian a una o varias unidades de negocio mediante `UserBusinessUnit`
/// - Los cargos (`Position`) son estructurales, no de control de acceso

/// üßº Estilo:
/// - Campos: camelCase
/// - Tablas: PascalCase
/// - Auditar con campos createdAt, updatedAt, createdBy, updatedBy si aplica
